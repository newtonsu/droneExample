<?xml version="1.0" encoding="UTF-8"?>
<!-- status表示log4j2本身的日志信息打印级别，和下面的level，不是一个概念。指的是如果 Log4j2 本身出错，打印出的日志级别配置 -->
<!--TRACE < DEBUG < INFO < WARN < ERROR < FATAL < OFF-->
<Configuration status="OFF" monitorInterval="30">
    <Console name="Console" target="SYSTEM_OUT">
        <PatternLayout pattern="%d{HH:mm:ss.SSS} [%t] %-5level %l - %msg%n"/>
        <ThresholdFilter level="debug"/>
    </Console>
    <Properties>
        <Property name="LOG_PATTERN">
            %d{yyyy-MM-dd HH:mm:ss.SSS} %5p ${hostName} -&#45;&#45; [%15.15t] %-40.40c{1.} : %m%n%ex
        </Property>
        <Property name="LOG_FILE_PATH">/Users/deyang/work/example</Property>
    </Properties>
    <Appenders>
        <!--输出到控制台-->
        <Console name="ConsoleAppender" target="SYSTEM_OUT" follow="true">
            <!--输出格式-->
            <PatternLayout pattern="${LOG_PATTERN}"/>
        </Console>
        <!-- Rolling File Appender -->
        <!--fileName为生成的文件名，x为路径，也可以采用相对路径模式，filePattern为时间到达后产生新日志，旧日志的文件名-->
<!--        <RollingFile name="FileAppender" fileName="${LOG_FILE_PATH}/threesilly.log"-->
<!--                     filePattern="${LOG_FILE_PATH}/threesilly-%d{yyyy-MM-dd}-%i.log">-->

            <!--输出格式-->
<!--            <PatternLayout>-->
<!--                <Pattern>${LOG_PATTERN}</Pattern>-->
<!--            </PatternLayout>-->
        <RollingFile name="FileLog" fileName="./logs/service.log" filePattern="./logs/replication.%d{yyyy-MM-dd}-%i.log">
            <PatternLayout pattern="%d{yyyy.MM.dd HH:mm:ss.SSS} [%t] %-5level  %l - %msg%n"/>
            <!--<JsonLayout complete="false" compact="true">
                <KeyValuePair key="timestamp" value="$${date:yyyy-MM-dd'T'HH:mm:ss.SSSZ}" />
            </JsonLayout>-->
<!--            <Filters>-->
<!--                &lt;!&ndash; 只记录ERROR级别日志信息，程序打印的其他信息不会被记录 &ndash;&gt;-->
<!--                &lt;!&ndash; 此level设置的日志级别，是过滤日志文件中打印出的日志信息，和Root的level有所区别 &ndash;&gt;-->
<!--                <ThresholdFilter level="INFO" onMatch="ACCEPT" onMismatch="DENY" />-->
<!--            </Filters>-->
<!--            <Policies>-->
<!--                &lt;!&ndash; 此处为每个文件大小策略限制，使用它一般会在文件中filePattern采用%i模式 &ndash;&gt;-->
<!--                <SizeBasedTriggeringPolicy size="10KB" />-->
<!--                &lt;!&ndash; 每天创建一个日志文件 &ndash;&gt;-->
<!--                 <TimeBasedTriggeringPolicy interval="1" />-->
<!--            </Policies>-->
<!--            <DefaultRolloverStrategy>-->
<!--                <Delete basePath="${LOG_FILE_PATH}" maxDepth="2">-->
<!--                    <IfFileName glob="*.log" />-->
<!--                    &lt;!&ndash;!Note: 这里的age必须和filePattern协调, 后者是精确到dd, 这里就要写成xd, xD就不起作用-->
<!--                    另外, 数字最好>2, 否则可能造成删除的时候, 最近的文件还处于被占用状态,导致删除不成功!&ndash;&gt;-->
<!--                    &lt;!&ndash;7天&ndash;&gt;-->
<!--                    <IfLastModified age="7d" />-->
<!--                </Delete>-->
<!--            </DefaultRolloverStrategy>-->

            <Policies>
                <TimeBasedTriggeringPolicy/>
                <SizeBasedTriggeringPolicy size="200 MB"/>
            </Policies>
            <DefaultRolloverStrategy>
                <Delete basePath="./logs/" maxDepth="2">
                    <IfFileName glob="replication.*.log"/>
                    <IfAny>
                        <IfLastModified age="3d"/>
<!--                        <IfAccumulatedFileSize exceeds="5 GB" />-->
<!--                        <IfAccumulatedFileCount exceeds="30" />-->
                    </IfAny>
                </Delete>
            </DefaultRolloverStrategy>
            <ThresholdFilter level="info"/>
        </RollingFile>
    </Appenders>
    <Loggers>
        <!-- 用来单独指定日志的形式，比如要为指定包下的class指定不同的日志级别等。 -->
        <!--<Logger name="com.easyjijin.demo.springbootlog4j2" level="debug" additivity="false">
            <AppenderRef ref="ConsoleAppender" />
            <AppenderRef ref="FileAppender"/>
        </Logger>-->

        <!-- AsyncRoot - 异步记录日志 - 需要LMAXDisruptor的支持 -->
        <!-- <AsyncRootlevel="info" additivity="false">
          <AppenderRef ref="Console"/>
          <AppenderRef ref="FileAppender"/>
        </AsyncRoot> -->

        <!-- All < Trace < Debug < Info < Warn < Error < Fatal < OFF. -->
        　　　　 <!-- 程序会打印高于或等于所设置级别的日志，设置的日志等级越高，打印出来的日志就越少。-->
        <!-- 此level设置的日志级别，是过滤项目中输出的日志信息，和ThresholdFilter的level有所区别 -->
        <Root level="INFO">
            <AppenderRef ref="ConsoleAppender" />
            <AppenderRef ref="FileAppender"/>
        </Root>
    </Loggers>
</Configuration>
